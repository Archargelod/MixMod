//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MixMod.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MixModLocalization {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MixModLocalization() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MixMod.Properties.MixModLocalization", typeof(MixModLocalization).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use game language.
        /// </summary>
        internal static string AvailableLanguages_Default {
            get {
                return ResourceManager.GetString("AvailableLanguages.Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All heroes and cards will be changed during the match.
        /// </summary>
        internal static string CardState_All {
            get {
                return ResourceManager.GetString("CardState.All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Normal mode, all cards and heroes are displayed correctly.
        /// </summary>
        internal static string CardState_Default {
            get {
                return ResourceManager.GetString("CardState.Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All heroes and cards during the match will be normal, without animations.
        /// </summary>
        internal static string CardState_Disabled {
            get {
                return ResourceManager.GetString("CardState.Disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All your heroes and cards will be changed during the match.
        /// </summary>
        internal static string CardState_OnlyMy {
            get {
                return ResourceManager.GetString("CardState.OnlyMy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Board id.
        /// </summary>
        internal static string Dev_Board {
            get {
                return ResourceManager.GetString("Dev.Board", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Developer mode (mod).
        /// </summary>
        internal static string Dev_DevEnabled {
            get {
                return ResourceManager.GetString("Dev.DevEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Changes for coins.
        /// </summary>
        internal static string Dev_GoldenCoin {
            get {
                return ResourceManager.GetString("Dev.GoldenCoin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Developer Mode (game).
        /// </summary>
        internal static string Dev_IsInternal {
            get {
                return ResourceManager.GetString("Dev.IsInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your settings.
        /// </summary>
        internal static string DevicePreset_Custom {
            get {
                return ResourceManager.GetString("DevicePreset.Custom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Standard settings.
        /// </summary>
        internal static string DevicePreset_Default {
            get {
                return ResourceManager.GetString("DevicePreset.Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings for Huawei phone.
        /// </summary>
        internal static string DevicePreset_HuaweiPhone {
            get {
                return ResourceManager.GetString("DevicePreset.HuaweiPhone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings for iPad.
        /// </summary>
        internal static string DevicePreset_iPad {
            get {
                return ResourceManager.GetString("DevicePreset.iPad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings for iPhone.
        /// </summary>
        internal static string DevicePreset_iPhone {
            get {
                return ResourceManager.GetString("DevicePreset.iPhone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings for Mac.
        /// </summary>
        internal static string DevicePreset_Mac {
            get {
                return ResourceManager.GetString("DevicePreset.Mac", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings for Android phone.
        /// </summary>
        internal static string DevicePreset_Phone {
            get {
                return ResourceManager.GetString("DevicePreset.Phone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings for an Android tablet.
        /// </summary>
        internal static string DevicePreset_Tablet {
            get {
                return ResourceManager.GetString("DevicePreset.Tablet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Changes for Diamond Cards.
        /// </summary>
        internal static string Gameplay_DIAMOND {
            get {
                return ResourceManager.GetString("Gameplay.DIAMOND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disable the use of random emotes if all targets are randomly selected.
        /// </summary>
        internal static string Gameplay_DisableRandomForEmotes {
            get {
                return ResourceManager.GetString("Gameplay.DisableRandomForEmotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disable the characters&apos; emotions and thoughts.
        /// </summary>
        internal static string Gameplay_DisableThinkEmotes {
            get {
                return ResourceManager.GetString("Gameplay.DisableThinkEmotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The amount of emotion an opponent can say in 10 seconds. If this number is exceeded, his emotions will be disabled\n0 to disable emotions at the beginning of the match.
        /// </summary>
        internal static string Gameplay_EmotesBeforeBlock {
            get {
                return ResourceManager.GetString("Gameplay.EmotesBeforeBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enable emote spam blocker.
        /// </summary>
        internal static string Gameplay_EmoteSpamBlocker {
            get {
                return ResourceManager.GetString("Gameplay.EmoteSpamBlocker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Remove restrictions on the use of emotions.
        /// </summary>
        internal static string Gameplay_ExtendedBM {
            get {
                return ResourceManager.GetString("Gameplay.ExtendedBM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Changes for Gold Cards.
        /// </summary>
        internal static string Gameplay_GOLDEN {
            get {
                return ResourceManager.GetString("Gameplay.GOLDEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enable display of current enemy&apos;s rank.
        /// </summary>
        internal static string Gameplay_ShowOpponentRankInGame {
            get {
                return ResourceManager.GetString("Gameplay.ShowOpponentRankInGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disable Bob&apos;s comments on Battlegrounds.
        /// </summary>
        internal static string Gameplay_ShutUpBob {
            get {
                return ResourceManager.GetString("Gameplay.ShutUpBob", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Changes for signature cards.
        /// </summary>
        internal static string Gameplay_SIGNATURE {
            get {
                return ResourceManager.GetString("Gameplay.SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disable hero introduction animation.
        /// </summary>
        internal static string Gameplay_SkipHeroIntro {
            get {
                return ResourceManager.GetString("Gameplay.SkipHeroIntro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enable the use of advanced emotions.
        /// </summary>
        internal static string Gameplay_UseExtendedEmotes {
            get {
                return ResourceManager.GetString("Gameplay.UseExtendedEmotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Device simulation.
        /// </summary>
        internal static string Gifts_DevicePreset {
            get {
                return ResourceManager.GetString("Gifts.DevicePreset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enable hotkeys.
        /// </summary>
        internal static string Global_EnableShortcuts {
            get {
                return ResourceManager.GetString("Global.EnableShortcuts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Language.
        /// </summary>
        internal static string Global_Language {
            get {
                return ResourceManager.GetString("Global.Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Timescale value.
        /// </summary>
        internal static string Global_TimeScale {
            get {
                return ResourceManager.GetString("Global.TimeScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enable timescale.
        /// </summary>
        internal static string Global_TimeScaleEnabled {
            get {
                return ResourceManager.GetString("Global.TimeScaleEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Timescale only in game.
        /// </summary>
        internal static string Global_TimeScaleInGameOnly {
            get {
                return ResourceManager.GetString("Global.TimeScaleInGameOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unfold the cards in your opponent&apos;s hand in spectator mode.
        /// </summary>
        internal static string Others_MoveEnemyCards {
            get {
                return ResourceManager.GetString("Others.MoveEnemyCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pack ID for purchase.
        /// </summary>
        internal static string Others_PackIdToBuy {
            get {
                return ResourceManager.GetString("Others.PackIdToBuy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Test key.
        /// </summary>
        internal static string Shortcuts_TestShortcut {
            get {
                return ResourceManager.GetString("Shortcuts.TestShortcut", resourceCulture);
            }
        }
    }
}
